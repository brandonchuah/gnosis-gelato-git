[{"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/index.tsx":"1","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/GlobalStyle.ts":"2","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/App.tsx":"3","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Setup.js":"4","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Trade.js":"5","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Loading.js":"6","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getContracts.js":"7","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/config/address/addresses.js":"8","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getVolume.js":"9","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getOrders.js":"10","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/config/abi/abis.js":"11"},{"size":698,"mtime":1612493917330,"results":"12","hashOfConfig":"13"},{"size":787,"mtime":1612493917329,"results":"14","hashOfConfig":"13"},{"size":4563,"mtime":1618995358301,"results":"15","hashOfConfig":"13"},{"size":10325,"mtime":1618989152672,"results":"16","hashOfConfig":"13"},{"size":16694,"mtime":1618987455665,"results":"17","hashOfConfig":"13"},{"size":420,"mtime":1612849262940,"results":"18","hashOfConfig":"13"},{"size":2901,"mtime":1614499596605,"results":"19","hashOfConfig":"13"},{"size":899,"mtime":1618909866508,"results":"20","hashOfConfig":"13"},{"size":1702,"mtime":1614566375313,"results":"21","hashOfConfig":"13"},{"size":4250,"mtime":1618987181492,"results":"22","hashOfConfig":"13"},{"size":3119,"mtime":1618915098002,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h9steo",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/index.tsx",[],"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/GlobalStyle.ts",[],"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/App.tsx",["51","52","53","54","55","56","57","58","59","60"],"import React, { useCallback, useState, useEffect } from 'react';\nimport {ethers} from 'ethers';\nimport styled from 'styled-components';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\n\nimport { Button, Loader, Title, Layout } from '@gnosis.pm/safe-react-components';\nimport Setup from './components/Setup';\nimport Trade from './components/Trade';\nimport Loading from './components/Loading';\nimport getContracts from './helpers/getContracts';\nimport {addresses} from './config/address/addresses';\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n//\"homepage\": \"./\"\n\nconst Container = styled.form`\n  margin-bottom: 2rem;\n  width: 100%;\n  max-width: 480px;\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n`;\n\nconst SAppContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 100vw;\n`\n\nconst App: React.FC = () => {\n  const { sdk, safe } = useSafeAppsSDK();\n  const [submitting, setSubmitting] = useState(false);\n  const [isSetup, setIsSetup] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n\n  const [contracts, setContracts] = useState<Object>();\n  const [ethBalance, setEthBalance] = useState(\"\");\n\n  useEffect(() => {\n    getBalance();\n    getProvider();\n   \n  }, [isSetup]);\n\n  const checkIsSetup = async(contractsObj: { uniswapV2Contract?: ethers.Contract; gelatoUserProxyFactoryContract?: ethers.Contract; gelatoProviderContract?: ethers.Contract; gelatoCoreContract: any; proxyContract?: ethers.Contract; conditionUniswapV2RateStatefulContract?: ethers.Contract; conditionUniswapV2RateContract?: ethers.Contract; gelatoSysAdminContract?: ethers.Contract; daiContract?: ethers.Contract; wethContract?: ethers.Contract; }) => {\n    const info = await sdk.getSafeInfo();\n    const address = info.safeAddress;\n\n    const assignedExecutor = await contractsObj.gelatoCoreContract.executorByProvider(\n        address\n    )\n    console.log(\"assigned executor: \", assignedExecutor);\n\n    const balanceOnGelato = await contractsObj.gelatoCoreContract.providerFunds(address);\n    console.log('balance on gelato: ', ethers.utils.formatEther(balanceOnGelato.toString()));\n    \n    const isUserProxyModuleWhitelisted = await contractsObj.gelatoCoreContract.isModuleProvided(\n        address,\n        addresses.gelatoProviderModule\n    );\n    console.log('user proxy whitelisted status: ', isUserProxyModuleWhitelisted);\n\n    if(assignedExecutor != ZERO_ADDRESS && isUserProxyModuleWhitelisted && balanceOnGelato > ethers.utils.parseEther(\"0.1\"))\n        setIsSetup(true);\n    setLoading(false);\n}\n\n  const setUpContracts = async(ethProvider: ethers.providers.JsonRpcProvider) => {\n    const contractsObj =  getContracts(ethProvider);\n    setContracts(contractsObj);\n    await checkIsSetup(contractsObj);\n  }\n\n  const getProvider = () => {\n    const ethProvider = new ethers.providers.JsonRpcProvider( \"https://rinkeby.infura.io/v3/8aa85020fddd4d75bc65b6fbebea2eb6\", \"rinkeby\");\n    console.log(ethProvider);\n    setProvider(ethProvider);\n    setUpContracts(ethProvider);\n    // console.log(\"hello\");\n    // console.log(ethProvider);\n  }\n\n  const getBalance = async() =>{\n    const info = await sdk.getSafeInfo();\n    const address = info.safeAddress;\n    const res = await sdk.eth.getBalance([address]);\n    const balance = ethers.utils.formatEther(ethers.BigNumber.from(res))\n    setEthBalance(balance);\n}\n\nif (loading === true){\n  return <Loading/>\n}\nelse if(isSetup){\n  return (\n    <SAppContainer>\n      <Trade\n        sdk={sdk}\n        safe={safe}\n        contracts={contracts}\n        provider={provider}\n      />    \n    </SAppContainer>\n\n)} \nelse{\n  return(\n    <Setup\n      safe={safe}\n      sdk={sdk}\n      ethBalance={ethBalance}\n      provider={provider}\n      contracts={contracts}\n      checkIsSetup={checkIsSetup}\n      isSetUp={isSetup}\n    />\n\n  )\n}\n    \n    \n\n}\n\n\n\n\n\nexport default App;\n\n\n// const submitTx = useCallback(async () => {\n//   setSubmitting(true);\n//   try {\n//     const { safeTxHash } = await sdk.txs.send({\n//       txs: [\n//         {\n//           to: safe.safeAddress,\n//           value: '0',\n//           data: '0x',\n//         },\n//       ],\n//     });\n//     console.log({ safeTxHash });\n//     const safeTx = await sdk.txs.getBySafeTxHash(safeTxHash);\n//     console.log({ safeTx });\n//   } catch (e) {\n//     console.error(e);\n//   }\n//   setSubmitting(false);\n// }, [safe, sdk]);","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Setup.js",["61","62","63","64","65"],"import React, {useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { \n    Button, \n    Card, \n    Title, \n    Text,\n    EthHashInfo,\n    Loader,\n    Divider,\n    EtherscanButton\n} from '@gnosis.pm/safe-react-components';\n\nimport {ethers} from 'ethers';\n\nimport {addresses} from '../config/address/addresses';\nimport { Task } from '@gelatonetwork/core';\nconst {abis} = require(\"../config/abi/abis\");\n\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`\n\nconst Centered = styled.main`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  /* bring your own prefixes */\n  transform: translate(-50%, -50%);\n\n`\n\n\nconst SAppContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 100vw;\n  margin-top: 25px;\n\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst Loading = styled.div`\n  margin-right: 80px;\n  margin-left: 160px;\n`\n\n\nexport default function Setup({safe, sdk, ethBalance, provider, contracts, checkIsSetup, isSetUp}) {\n    const [loading, setLoading] = useState(false);\n \n  \n    const provideGelatoFunds = async() => {\n        const iFace = new ethers.utils.Interface(abis.gelatoCoreABI);\n        const provideFundsData = iFace.encodeFunctionData(\"provideFunds\", [safe.safeAddress])\n\n        const txs = [\n            {\n                to: addresses.gelatoCore,\n                value: ethers.utils.parseEther(\"1\").toString(),\n                data: provideFundsData\n            }\n        ]\n        const params = {\n            safeTxGas: 500000,\n          };\n\n        try{\n            setLoading(true);\n            const safeTxHash = await sdk.txs.send({txs, params});\n            await wait(30000).then(() => {\n                const tx = sdk.txs.getBySafeTxHash(safeTxHash);\n                console.log('tx: ', tx);\n                checkIsSetup(contracts);\n            })\n\n        }\n        catch(error){\n            setLoading(false);\n            console.error(error);\n        }\n    }\n\n    const firstSetup = async() => {\n        const gnosisSafeContract = new ethers.Contract(\n            safe.safeAddress,\n            abis.iGnosisSafeABI,\n            provider\n        )\n        const owners = await gnosisSafeContract.getOwners();\n        console.log('owners: ', owners);\n\n\n        const whitelistedModules = await gnosisSafeContract.getModules();\n        console.log('whitelist: ', whitelistedModules);\n\n        const iFaceGnosisSafe = new ethers.utils.Interface(abis.iGnosisSafeABI);\n        const gnosisEnableModuleData = iFaceGnosisSafe.encodeFunctionData(\"enableModule\",[\n            addresses.gelatoCore\n        ])\n        const iFace = new ethers.utils.Interface(abis.gelatoCoreABI);\n        const multiProvideData = iFace.encodeFunctionData(\"multiProvide\", [\n            addresses.gelatoExecutor, \n            [], \n            [addresses.gelatoProviderModule]]);\n\n        const txs = [\n            {\n                to: safe.safeAddress,\n                value: 0,\n                data: gnosisEnableModuleData\n            },\n            {\n                to: addresses.gelatoCore,\n                value: ethers.utils.parseEther(\"0.5\").toString(),\n                // value: 0,\n                data: multiProvideData\n            }\n        ]\n        const params = {\n            safeTxGas: 500000,\n          };\n\n        try{\n            setLoading(true);\n            const safeTxHash = await sdk.txs.send({txs, params});\n            await wait(30000).then(() => {\n                const tx = sdk.txs.getBySafeTxHash(safeTxHash);\n                console.log('tx: ', tx);\n                checkIsSetup(contracts);\n            })\n\n        }\n        catch(error){\n            setLoading(false);\n            console.error(error);\n        }\n    }\n\n    const onClickSetUp = async() => {\n    \n        const assignedExecutor = await contracts.gelatoCoreContract.executorByProvider(\n            safe.safeAddress\n        )\n        console.log(\"assigned executor: \", assignedExecutor);\n\n        const balanceOnGelato = await contracts.gelatoCoreContract.providerFunds(safe.safeAddress);\n        console.log('balance on gelato: ', ethers.utils.formatEther(balanceOnGelato.toString()));\n        console.log('balance on gelato: ', (balanceOnGelato.toString()));\n        // console.log('need balance on gelato: ', ethers.utils.parseEther(\"0.5\").toString())\n        \n        const isUserProxyModuleWhitelisted = await contracts.gelatoCoreContract.isModuleProvided(\n            safe.safeAddress,\n            addresses.gelatoProviderModule\n        );\n        console.log('user proxy whitelisted status: ', isUserProxyModuleWhitelisted);\n\n        if(assignedExecutor === ZERO_ADDRESS && !isUserProxyModuleWhitelisted && balanceOnGelato < ethers.utils.parseEther(\"0.5\")){\n            console.log(\"first time setup\")\n            firstSetup();\n        }\n        else if(assignedExecutor === ZERO_ADDRESS && !isUserProxyModuleWhitelisted && balanceOnGelato > 0){\n            console.log(\"fist time setup\")\n            firstSetup();\n        }\n        else{\n            console.log(\"providing gelato funds\")\n            provideGelatoFunds();\n        }\n     \n    }\n   \n    const onClickRemoveProvider = async() => {\n        const iFace = new ethers.utils.Interface(abis.gelatoCoreABI);\n        const removeProviderModulesData = iFace.encodeFunctionData(\"removeProviderModules\", [\n            [addresses.gelatoProviderModule]]);\n\n        const providerAssignsExecutorData = iFace.encodeFunctionData(\"providerAssignsExecutor\",[ZERO_ADDRESS])\n        \n        const txs = [\n            {\n                to: addresses.gelatoCore,\n                value: 0,\n                data: removeProviderModulesData\n            },\n            {\n                to: addresses.gelatoCore,\n                value: 0,\n                data: providerAssignsExecutorData\n            },\n        ]\n        const params = {\n            safeTxGas: 500000,\n          };\n\n          try{\n            setLoading(true);\n            const safeTxHash = await sdk.txs.send({txs, params});\n            await wait(30000).then(() => {\n                const tx = sdk.txs.getBySafeTxHash(safeTxHash);\n                console.log('tx: ', tx);\n                checkIsSetup(contracts);\n            });\n           \n\n        }\n        catch(error){\n            setLoading(false);\n            console.error(error);\n        }\n    }\n\n    async function wait(ms) {\n        return new Promise(resolve => {\n          setTimeout(resolve, ms);\n        });\n      }\n\n    const checkState = async() => {\n        const tx = await sdk.txs.getBySafeTxHash(\"0xb708212826bc7e9da0108e802829def000f5a629d9079f6a381c4bc3ac6f294b\");\n        const txR = await sdk.eth.getTransactionReceipt([\n            '0xb708212826bc7e9da0108e802829def000f5a629d9079f6a381c4bc3ac6f294b',\n          ]);\n        console.log('txr: ', txR);\n        console.log(\"HERHEHREHRHRHEHERHERH\");\n        console.log(tx);\n        console.log(\"confirm\",tx.isSuccessful)\n    }\n\n    return (\n        <Centered>\n        <SAppContainer>\n            {/* <Title size=\"xs\">Setup Page</Title> */}\n\n            {/* <Button \n            size=\"lg\" \n            color=\"primary\" \n            iconType=\"settings\" \n            variant=\"contained\"\n            // onClick={() => {checkIsSetup(contracts)}}\n            onClick={checkState}\n            >\n            check\n            </Button> */}\n\n            <Divider/>\n        \n            <Card>\n                <Text size=\"xl\" color=\"primary\">Gnosis Safe Address: </Text>\n                <Line>\n                    <TitleLine>\n                <EthHashInfo textSize=\"lg\" hash={safe.safeAddress} />\n                    </TitleLine>\n                <EtherscanButton value={safe.safeAddress} network=\"rinkeby\"/>\n                </Line>\n\n                <Divider />\n                \n                <Line>\n                    <TitleLine>\n                        <Text size=\"xl\" color=\"primary\">ETH Balance:</Text>\n                    </TitleLine>\n                    <Text size=\"lg\">{ethBalance}</Text>\n                </Line>\n               \n               \n                {\n                loading ? (\n                    <Line>\n                    <Loading>\n                      <Loader size=\"sm\" />\n                    </Loading>\n                      <Button \n                      size=\"lg\" \n                      color=\"secondary\" \n                      iconType=\"resync\" \n                      variant=\"bordered\"\n                      onClick={() => {checkIsSetup(contracts)}}\n                      >\n                      Refresh\n                      </Button> \n                    </Line>\n\n                ) : (\n                    <Button \n                    size=\"lg\" \n                    color=\"primary\" \n                    iconType=\"settings\" \n                    variant=\"contained\"\n                    onClick={onClickSetUp}\n                    >\n                    Complete Set-up\n                    </Button>\n                )}\n\n                         \n\n        </Card> \n      \n           \n        </SAppContainer>\n        </Centered>\n    )\n}\n\n// ===============for calling=================\n// const iFace = new ethers.utils.Interface(abis.IERC20ABI);\n// const data = iFace.encodeFunctionData(\"balanceOf\", [\"0x2F4dAcdD6613Dd2d41Ea0C578d7E666bbDAf3424\"]);\n// const txn = [\n//     {\n//       to: addresses.dai,\n//       data: data\n//     }\n//   ];\n//   console.log(sdk)\n//   console.log(txn);\n  \n// const txResult = await sdk.eth.call(txn);\n\n// console.log('call result: ',parseInt(txResult));\n// ===============for sending=================\n// const iFace = new ethers.utils.Interface(abis.IERC20ABI);\n// const data = iFace.encodeFunctionData(\"transfer\", [\"0x2F4dAcdD6613Dd2d41Ea0C578d7E666bbDAf3424\", ethers.BigNumber.from(\"1000000000000000000\")])\n//  const txs = [\n//      {\n//          to: addresses.dai,\n//          value: 0,\n//          data: data\n//      }\n//  ]\n//  const params = {\n//      safeTxGas: 500000,\n//    };\n\n//  const txn = await sdk.txs.send({txs, params});\n//  console.log(\"sending transaction\");\n//  const tx = await sdk.txs.getBySafeTxHash(txs);\n//  console.log(\"tx result: \", tx);\n","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Trade.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import React, {useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { \n    Button, \n    Card, \n    Dot,\n    Title, \n    Text,\n    EthHashInfo,\n    Loader,\n    Divider,\n    TextField,\n    FixedIcon,\n    Icon,\n    EtherscanButton,\n    Switch\n} from '@gnosis.pm/safe-react-components';\n\nimport {ethers} from 'ethers';\n\nimport {addresses} from '../config/address/addresses';\nimport {getTicker, getRate} from '../helpers/getVolume';\nimport getOrders from '../helpers/getOrders';\nimport { create } from 'domain';\nimport { type } from 'os';\nconst {abis} = require(\"../config/abi/abis\");\nconst { Action, Condition, Operation, Task, GelatoProvider } = require(\"@gelatonetwork/core\");\nconst BigNumber = require('bignumber.js');\n\n\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`\nconst SContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-top: 25px;\n`\nconst SAppContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 100vw;\n  margin-top: 25px;\n\n`\n\nconst TitleLine = styled.div`\n  margin-right: 15px;\n`\n\nconst AlignRight = styled.div`\n  margin-left: 300px;\n`\n\nconst AlignRightButton = styled.div`\n  margin-left: 20px;\n`\n\nexport default function Trade({sdk, safe, contracts, provider}) {\n    const [tokenAddress_sell, setTokenAddress_sell] = useState('');\n    const [tokenAddress_buy, setTokenAddress_buy] = useState('');\n    const [sellAmount, setSellAmount] = useState(0);\n    const [rateInput, setRateInput] = useState(0);\n    const [uniswapRate, setUniswapRate] = useState(\"\");\n    const [isLarger, setIsLarger] = useState(true);\n    const [ticker, setTicker] = useState([]);\n    const [ordersCard, setOrdersCard] = useState([]);\n\n    const onSellAddressChange = async(e) => {\n        setTokenAddress_sell(e.target.value);\n        const tokenTicker = await getTicker(e.target.value);\n        if(tokenTicker){\n            ticker[0] = tokenTicker;\n        }\n        else{\n            ticker[0] = \"Invalid Address\"\n        }\n\n    }\n\n    const onBuyAddressChange = async(e) => {\n        setTokenAddress_buy(e.target.value);\n        const tokenTicker = await getTicker(e.target.value);\n        if(tokenTicker){\n            ticker[1] = tokenTicker;\n        }\n        else{\n            ticker[1] = \"Invalid Address\"\n        }\n\n    }\n\n    const onSellAmountChange = async(e) => {\n        var amt = e.target.value\n        var parsed = amt * 10 ** 18\n        setSellAmount(parsed.toString())\n    }\n\n    const onClickGetRate = async() => {\n        try{ \n        console.log('rateInput: ', rateInput);\n        console.log('sellAmount: ', sellAmount.toString());\n        console.log('tokenAddress sell: ', tokenAddress_sell);\n        console.log('tokenAddress buy: ', tokenAddress_buy);\n        console.log('isLarger: ', isLarger);\n        console.log('ticker 0: ', ticker[0]);\n        console.log('ticker 1: ', ticker[1]);\n\n\n        const rate = await getRate(tokenAddress_sell, tokenAddress_buy, contracts.conditionUniswapV2RateContract)\n\n        console.log(\"rate: \", rate);\n        setUniswapRate(rate)\n        }catch(error){\n            setUniswapRate(\"Rate not found\")\n            console.log(\"No token found\")\n        }\n\n    }\n\n    const createTask = async() => {\n        const iFaceIERC20 = new ethers.utils.Interface(abis.IERC20ABI);\n        const approveTokenData = iFaceIERC20.encodeFunctionData(\"approve\", [\n            addresses.uniswapV2,\n            sellAmount\n        ]);    \n\n        const action_approveSellToken = new Action({\n            addr: tokenAddress_sell,\n            data: approveTokenData,\n            operation: Operation.Call,\n        });\n\n        const iFaceUNI = new ethers.utils.Interface(abis.uniswapV2ABI);\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        const tokenPath = [tokenAddress_sell, tokenAddress_buy];\n        const expiryDate = nowInSeconds + 900;\n        const swapExactTokensForTokensData = iFaceUNI.encodeFunctionData(\"swapExactTokensForTokens\", [\n            sellAmount, \n            0, \n            tokenPath, \n            safe.safeAddress, \n            expiryDate])\n\n        const action_swapTokensUniswap = new Action({\n            addr: addresses.uniswapV2,\n            data: swapExactTokensForTokensData,\n            operation: Operation.Call, // This Action must be executed via the UserProxy\n        });\n\n\n        const rate = await getRate(tokenAddress_sell, tokenAddress_buy, contracts.conditionUniswapV2RateContract)\n        const rate_parseEther = ethers.utils.parseEther(rate);\n        const percentage = rateInput / 100;\n        const calc_execution_rate = isLarger \n        ? Math.round(rate_parseEther * (1 + percentage))\n        : Math.round(rate_parseEther * (1 - percentage));\n        const execution_rate = new BigNumber(calc_execution_rate).toFixed()\n        // const execution_rate = calc_execution_rate\n        // console.log(typeof execution_rate)\n\n        console.log(\"rate_parseEther: \", rate_parseEther.toString())\n        console.log('rate: ', rate);\n        console.log('percentage: ',percentage);\n        console.log('calc exec rate: ', calc_execution_rate);;\n        // console.log('exec rate: ', ethers.utils.formatEther(execution_rate));\n        console.log('exec rate: ', execution_rate);\n\n        const condition_uniRate = new Condition({\n            inst: addresses.conditionUniswapV2Rate,\n            data: await contracts.conditionUniswapV2RateContract.getConditionData(\n                tokenAddress_sell,\n                sellAmount,\n                tokenAddress_buy,\n                execution_rate,\n                isLarger\n            ),\n        });\n        const estimatedGasPerExecution = ethers.BigNumber.from(\"700000\"); \n\n        const task_tradeOnUniswap = new Task({\n            // All the conditions have to be met\n            // conditions: [condition_uniRate],\n            conditions: [condition_uniRate],\n\n            // These Actions have to be executed in the same TX all-or-nothing\n            actions: [\n            //   action_setRefRateRelative,\n            //   action_checkRefRateUniswap,\n            action_approveSellToken,\n            action_swapTokensUniswap\n            ],\n            selfProviderGasLimit: estimatedGasPerExecution, \n            selfProviderGasPriceCeil: 0, \n        });\n\n        return task_tradeOnUniswap;\n    }\n\n    const createTransferTask = async() => {\n        const iFace = new ethers.utils.Interface(abis.IERC20ABI);\n        const transferData = iFace.encodeFunctionData(\"transfer\", [\n            \"0x2F4dAcdD6613Dd2d41Ea0C578d7E666bbDAf3424\",\n            ethers.utils.parseEther(\"1\")\n        ]);\n\n        const DAI_ADDRESS = \"0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea\";\n\n        const actionTransfer = new Action({\n            addr: DAI_ADDRESS,\n            data: transferData,\n            operation: Operation.Call,\n        });\n\n        const estimatedGasPerExecution = ethers.BigNumber.from(\"700000\"); \n\n        const task_transfer = new Task({\n            conditions: [],\n            actions: [actionTransfer],\n            selfProviderGasLimit: estimatedGasPerExecution, \n            selfProviderGasPriceCeil: 0, \n        });\n\n        return task_transfer;\n    }\n\n    const onClickSubmit = async() => {\n        try{\n           \n            const task_transfer = await createTask();\n            \n            const myGelatoProvider = new GelatoProvider({\n                addr: safe.safeAddress, \n                module: addresses.gelatoProviderModule\n            });\n\n            console.log('provider: ',myGelatoProvider);\n\n            const canSubmit = await contracts.gelatoCoreContract.canSubmitTask(\n                safe.safeAddress,\n                myGelatoProvider,\n                task_transfer,\n                0\n            );\n            console.log('can submit: ',canSubmit);\n\n            const iFaceGelatoCore = new ethers.utils.Interface(abis.gelatoCoreABI);\n            const submitTaskToGelatoData = iFaceGelatoCore.encodeFunctionData(\n                \"submitTask\",\n                [\n                 myGelatoProvider,\n                 task_transfer,\n                 0,  \n                ]\n            )\n\n            const txs = [\n                {\n                    to: addresses.gelatoCore,\n                    value: 0,\n                    data: submitTaskToGelatoData\n                }\n            ]\n            const params = {\n                safeTxGas: 500000,\n            };\n\n\n            const safeTxHash = await sdk.txs.send({txs, params});\n\n        }\n        catch(error){\n            alert('Transaction failed')\n            console.error(error);\n        }\n    }\n\n    const showOrders = async() => {\n        const res = await getOrders(safe.safeAddress);\n        console.log(safe.safeAddress)\n        var temp_card = [];\n\n        if(res !== undefined){\n            const receipts = res[1];\n            const conditions = res[0];\n\n            temp_card.push(\n                <Card>\n                    <Line>\n                        <Text size=\"lg\">Order history </Text>\n                        <Button \n                        size=\"lg\" \n                        color=\"secondary\" \n                        iconType=\"resync\" \n                        variant=\"bordered\"\n                        onClick={() => {showOrders()}}\n                        >\n                        Refresh\n                        </Button> \n                    </Line>\n                </Card>\n            )\n\n            for(var x=0; x<conditions.length; x++){\n                temp_card.push(<Divider/>)\n\n                temp_card.push(\n                    <Card>\n                    <Line>\n                        <TitleLine>\n                            <Text size=\"xl\" color=\"primary\">Sell: </Text>\n                        </TitleLine>\n                        <Text size=\"lg\">{conditions[x]._sellToken}</Text>\n                    </Line>\n                        <FixedIcon type={'chevronDown'} />\n                    <Line>\n                        <TitleLine>\n                            <Text size=\"xl\" color=\"primary\">Buy: </Text>\n                        </TitleLine>\n                        <Text size=\"lg\">{conditions[x]._buyToken}</Text>\n                    </Line>\n                    <Line>\n                        <TitleLine>\n                            <Text size=\"xl\" color=\"primary\">Amount: </Text>\n                        </TitleLine>\n                        <Text size=\"lg\">{ethers.utils.formatEther(conditions[x]._sellAmount)}</Text>\n                    </Line>\n                    <Line>\n                        <TitleLine>\n                            <Text size=\"xl\" color=\"primary\">Rate: </Text>\n                        </TitleLine>\n                        {conditions[x]._greaterElseSmaller == true ? \n                            <Text size=\"lg\"> {\">\"} </Text> :\n                            <Text size=\"lg\"> {\"<\"} </Text>\n                        }\n                        <Text size=\"lg\">{ethers.utils.formatEther(conditions[x]._currentRefRate)}</Text>\n                    </Line>\n                    \n                    <Line>\n                    <EtherscanButton value={receipts[x].submissionHash} network=\"rinkeby\" />\n                    {receipts[x].status == \"execSuccess\" \n                        ? <AlignRight><Icon size=\"sm\" type=\"check\" color=\"primary\" /></AlignRight>\n                        : receipts[x].status == \"execReverted\" \n                            ? <AlignRight><Icon size=\"sm\" type=\"cross\" color=\"error\" /></AlignRight>\n                            : <AlignRight><Icon size=\"sm\" type=\"allowances\" color=\"rinkeby\" /></AlignRight>\n                    }\n\n                    </Line>\n\n\n\n                </Card>\n                )\n            }\n        }else{\n            temp_card.push(\n                <Card>\n                    <Line>\n                        <Text size=\"lg\"> No order history </Text>\n                        <Button \n                        size=\"lg\" \n                        color=\"secondary\" \n                        iconType=\"resync\" \n                        variant=\"bordered\"\n                        onClick={() => {showOrders()}}\n                        >\n                        Refresh\n                        </Button> \n                    </Line>\n                </Card>\n            )\n        }\n        setOrdersCard(temp_card)\n        console.log(res)\n    }\n\n    \n\n    useEffect(() => {\n        showOrders();\n      }, []);\n\n    return (\n        <SAppContainer>\n        <Card>\n           <Line>\n            <TitleLine>\n                <form noValidate autoComplete=\"off\" >\n                    <TextField\n                    id=\"standard-name\"\n                    label=\"Token Address\"\n                    value={tokenAddress_sell}\n                    onChange={(e) => {onSellAddressChange(e)}}\n                    />\n                </form>\n            </TitleLine>\n            <TitleLine>\n            <FixedIcon type={'chevronRight'} />            \n            </TitleLine>\n          \n                <form noValidate autoComplete=\"off\" >\n                    <TextField\n                    id=\"standard-name\"\n                    label=\"Token Address\"\n                    value={tokenAddress_buy}\n                    onChange={(e) => {onBuyAddressChange(e)}}\n                    />\n                </form>\n            </Line>    \n\n            <Divider/>\n            <Line>\n                <TitleLine>\n                <Button \n                    size=\"md\" \n                    color=\"primary\" \n                    iconType=\"search\" \n                    variant=\"contained\"\n                    // onClick={() => {checkIsSetup(contracts)}}\n                    onClick={onClickGetRate}\n                >\n                Get Current Rate\n                </Button>\n                </TitleLine>\n                <form noValidate autoComplete=\"off\">\n                    <TextField\n                    id=\"standard-name\"\n                    label=\"Rate\"\n                    readOnly\n                    value={uniswapRate}\n                    />\n                </form>\n            </Line>\n\n\n        </Card>\n        <Divider />\n        <Card>\n            <Line>\n            <TitleLine>\n                    <Text size=\"xl\"> Convert </Text>\n            </TitleLine>\n\n            <TitleLine>\n                <form noValidate autoComplete=\"off\" >\n                    <TextField\n                    id=\"standard-name\"\n                    label=\"Amount\"\n                    onChange={(e) => {onSellAmountChange(e)}}\n                    />\n                </form>\n            </TitleLine>\n\n            <TitleLine>\n                    <Text size=\"xl\"> of </Text>\n            </TitleLine>\n                \n            <TitleLine>\n                <form noValidate autoComplete=\"off\">\n                        <TextField\n                        id=\"standard-name\"\n                        readOnly\n                        value={ticker[0]}\n                        />\n                </form>\n            </TitleLine>\n\n            <TitleLine>\n                <Text size=\"xl\"> to </Text>\n            </TitleLine>\n\n                <form noValidate autoComplete=\"off\">\n                        <TextField\n                        id=\"standard-name\"\n                        readOnly\n                        value={ticker[1]}\n                        />\n                </form>\n\n            </Line>\n\n            <Line>\n            <TitleLine>\n                <Text size=\"xl\">when the rate is </Text>\n            </TitleLine>\n\n            <TitleLine>\n                <form noValidate autoComplete=\"off\" >\n                        <TextField\n                        id=\"standard-name\"\n                        label=\"Percentage\"\n                        onChange={(e) => (setRateInput(e.target.value))}\n                        />\n                </form>\n            </TitleLine>\n\n                <Text size=\"xl\">% Lower</Text>\n\n                <Switch checked={isLarger} onChange={setIsLarger} />\n            \n                <Text size=\"xl\">Higher than current rate</Text>\n                  \n                <AlignRightButton>\n                    <Button \n                        size=\"lg\" \n                        color=\"primary\" \n                        variant=\"contained\"\n                        onClick={onClickSubmit}\n                    > Submit </Button>\n\n                </AlignRightButton>\n\n            </Line>\n\n\n\n        </Card>\n\n\n\n          \n\n        <Divider />\n\n       \n\n        \n           {ordersCard}\n     \n        \n        </SAppContainer>\n\n    )\n}\n","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/components/Loading.js",[],"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getContracts.js",[],"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/config/address/addresses.js",[],"/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getVolume.js",["80","81","82","83","84","85"],"import {ethers} from 'ethers';\nimport { addresses } from '../config/address/addresses';\n\n\nconst axios = require(\"axios\");\nconst { ChainId, Fetcher } = require ('@uniswap/sdk');\nconst SELL_AMOUNT = ethers.utils.parseEther(\"1\");\nconst chainId = ChainId.RINKEBY //change on network change\nconst MAINNET_WETH = ethers.utils.getAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'); //change on network change\nconst MAINNET_SUBGRAPH = 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\nconst RINKEBY_WETH = ethers.utils.getAddress('0xc778417e063141139fce010982780140aa0cd5ab');\n// const RINKEBY_SUBGRAPH = 'https://api.thegraph.com/subgraphs/name/crypto-steve-ng/uniswapv2rinkeby'\nconst RINKEBY_SUBGRAPH = 'https://api.thegraph.com/subgraphs/name/jmahhh/uniswap-v2-rinkeby'\n\nexport const getTicker = async(address) => {\n    try{\n        const result = await axios.post(\n            `${RINKEBY_SUBGRAPH}`,{\n                query: `\n                    {\n                        token(id: \"${address}\"){\n                        symbol\n                        }\n                    }\n                `\n            }\n        )\n        console.log('subgraph result: ', result);\n        return result.data.data.token.symbol\n    }\n    catch(error){\n        console.log('Invalid address')\n    }\n}\n\n\nexport const getRate = async(address_A, address_B, conditionUniswapV2RateContract) => {\n    try{\n        const A_B_RATE = await conditionUniswapV2RateContract.getUniswapRate(\n            address_A,\n            SELL_AMOUNT,\n            address_B);\n            \n            return ethers.utils.formatEther(A_B_RATE);\n    }\n    catch(error){\n        console.log('getRate error');\n        return 0;\n    }\n\n}\n\n\n","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/helpers/getOrders.js",["86","87","88","89"],"const {ethers} = require(\"ethers\");\n\nconst axios = require(\"axios\");\n// const { ChainId, Fetcher } = require ('@uniswap/sdk');\nconst GELATO_SUBGRAPH = 'https://api.thegraph.com/subgraphs/name/gelatodigital/gelato-network-rinkeby'\nconst {abis} = require(\"../config/abi/abis\");\n\nconst getOrders = async(address) => {\n    try{\n        var address_lower = address.toLowerCase()\n        const result = await axios.post(\n            `${GELATO_SUBGRAPH}`,{\n                query: `\n                    {\n                                                \n                        taskReceiptWrappers(\n                            where: {\n                            user_contains:\"${address_lower}\"}) {\n                            taskReceipt {\n                            id\n                            tasks {\n                                conditions {\n                                inst\n                                data\n                                }\n                                actions {\n                                addr\n                                data\n                                operation\n                                dataFlow\n                                value\n                                termsOkCheck\n                                }\n                                selfProviderGasLimit\n                                selfProviderGasPriceCeil\n                            }\n                            }\n                            submissionHash\n                            status\n                        }\n                                                    \n                    }\n                `\n            }\n        )\n        console.log(result.data.data.taskReceiptWrappers)\n        console.log('end of all ---------------------------------------')\n        var receipts = result.data.data.taskReceiptWrappers;\n        var condition_data = [];\n        var condition_decoded = [];\n        for(var x=0 ; x < result.data.data.taskReceiptWrappers.length ; x++){\n            // console.log(result.data.data.taskReceiptWrappers[x].taskReceipt.id)\n            if(result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].actions.length == 2){\n                // result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].actions[0].addr \n                //     == \"0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea\"\n                //     &&\n                if( result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].actions[1].addr\n                    == \"0x7a250d5630b4cf539739df2c5dacb4c659f2488d\"\n                    && result.data.data.taskReceiptWrappers[x].taskReceipt.id > 1400\n                    && result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].conditions[0] != undefined)\n                {\n                    console.log(result.data.data.taskReceiptWrappers[x].taskReceipt)\n    \n                    // console.log(result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].conditions[0].data)\n                    const _data = result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].conditions[0].data\n                    // console.log(_data)\n                    condition_data.push(_data)\n                }\n                else{\n                    console.log('skip')\n                }\n            }else{\n                console.log('skip more than 2 actions')\n            }\n            // console.log(result.data.data.taskReceiptWrappers[x].taskReceipt.tasks[0].conditions[0].data);\n        }\n        \n        receipts.reverse()\n        // console.log(receipts[0].status)\n        condition_data.reverse()\n        // console.log('start')\n        // console.log(condition_data.length)\n\n        for(var x=0; x<condition_data.length; x++){\n            const iFaceCondition = new ethers.utils.Interface(abis.conditionUniswapV2RateABI);\n            const decoded = iFaceCondition.decodeFunctionData(\"checkRefRateUniswap\", condition_data[x])\n            condition_decoded.push(decoded)\n            // console.log(decoded)\n        }\n        return [condition_decoded, receipts];\n    }\n    catch(error){\n        console.log('Invalid address')\n        console.log(error)\n    }\n    \n    \n\n  \n}\n\nexport default getOrders;\n\n// getOrders(\"0x271e22eBAf356eF4db43465f73496A55500f5D95\");\n","/Users/chuahsonglin/Documents/projects/Gelato Gnosis/gnosis-gelato/src/config/abi/abis.js",[],{"ruleId":"90","severity":1,"message":"91","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":28},{"ruleId":"90","severity":1,"message":"94","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":16},{"ruleId":"90","severity":1,"message":"95","line":6,"column":18,"nodeType":"92","messageId":"93","endLine":6,"endColumn":24},{"ruleId":"90","severity":1,"message":"96","line":6,"column":26,"nodeType":"92","messageId":"93","endLine":6,"endColumn":31},{"ruleId":"90","severity":1,"message":"97","line":6,"column":33,"nodeType":"92","messageId":"93","endLine":6,"endColumn":39},{"ruleId":"90","severity":1,"message":"98","line":16,"column":7,"nodeType":"92","messageId":"93","endLine":16,"endColumn":16},{"ruleId":"90","severity":1,"message":"99","line":37,"column":10,"nodeType":"92","messageId":"93","endLine":37,"endColumn":20},{"ruleId":"90","severity":1,"message":"100","line":37,"column":22,"nodeType":"92","messageId":"93","endLine":37,"endColumn":35},{"ruleId":"101","severity":1,"message":"102","line":49,"column":6,"nodeType":"103","endLine":49,"endColumn":15,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":69,"column":25,"nodeType":"107","messageId":"108","endLine":69,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":1,"column":26,"nodeType":"92","messageId":"93","endLine":1,"endColumn":35},{"ruleId":"109","severity":1,"message":"96","line":6,"column":5,"nodeType":"92","messageId":"93","endLine":6,"endColumn":10},{"ruleId":"109","severity":1,"message":"111","line":17,"column":10,"nodeType":"92","messageId":"93","endLine":17,"endColumn":14},{"ruleId":"109","severity":1,"message":"112","line":188,"column":11,"nodeType":"92","messageId":"93","endLine":188,"endColumn":32},{"ruleId":"109","severity":1,"message":"113","line":234,"column":11,"nodeType":"92","messageId":"93","endLine":234,"endColumn":21},{"ruleId":"109","severity":1,"message":"114","line":6,"column":5,"nodeType":"92","messageId":"93","endLine":6,"endColumn":8},{"ruleId":"109","severity":1,"message":"96","line":7,"column":5,"nodeType":"92","messageId":"93","endLine":7,"endColumn":10},{"ruleId":"109","severity":1,"message":"115","line":9,"column":5,"nodeType":"92","messageId":"93","endLine":9,"endColumn":16},{"ruleId":"109","severity":1,"message":"95","line":10,"column":5,"nodeType":"92","messageId":"93","endLine":10,"endColumn":11},{"ruleId":"109","severity":1,"message":"116","line":24,"column":10,"nodeType":"92","messageId":"93","endLine":24,"endColumn":16},{"ruleId":"109","severity":1,"message":"117","line":25,"column":10,"nodeType":"92","messageId":"93","endLine":25,"endColumn":14},{"ruleId":"109","severity":1,"message":"118","line":41,"column":7,"nodeType":"92","messageId":"93","endLine":41,"endColumn":17},{"ruleId":"109","severity":1,"message":"119","line":76,"column":20,"nodeType":"92","messageId":"93","endLine":76,"endColumn":29},{"ruleId":"109","severity":1,"message":"120","line":210,"column":11,"nodeType":"92","messageId":"93","endLine":210,"endColumn":29},{"ruleId":"109","severity":1,"message":"121","line":279,"column":19,"nodeType":"92","messageId":"93","endLine":279,"endColumn":29},{"ruleId":"105","severity":1,"message":"122","line":342,"column":60,"nodeType":"107","messageId":"108","endLine":342,"endColumn":62},{"ruleId":"105","severity":1,"message":"122","line":351,"column":41,"nodeType":"107","messageId":"108","endLine":351,"endColumn":43},{"ruleId":"105","severity":1,"message":"122","line":353,"column":46,"nodeType":"107","messageId":"108","endLine":353,"endColumn":48},{"ruleId":"101","severity":1,"message":"123","line":391,"column":10,"nodeType":"103","endLine":391,"endColumn":12,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"125","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":19},{"ruleId":"109","severity":1,"message":"126","line":6,"column":18,"nodeType":"92","messageId":"93","endLine":6,"endColumn":25},{"ruleId":"109","severity":1,"message":"127","line":8,"column":7,"nodeType":"92","messageId":"93","endLine":8,"endColumn":14},{"ruleId":"109","severity":1,"message":"128","line":9,"column":7,"nodeType":"92","messageId":"93","endLine":9,"endColumn":19},{"ruleId":"109","severity":1,"message":"129","line":10,"column":7,"nodeType":"92","messageId":"93","endLine":10,"endColumn":23},{"ruleId":"109","severity":1,"message":"130","line":11,"column":7,"nodeType":"92","messageId":"93","endLine":11,"endColumn":19},{"ruleId":"105","severity":1,"message":"122","line":53,"column":92,"nodeType":"107","messageId":"108","endLine":53,"endColumn":94},{"ruleId":"105","severity":1,"message":"122","line":58,"column":21,"nodeType":"107","messageId":"108","endLine":58,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":60,"column":99,"nodeType":"107","messageId":"108","endLine":60,"endColumn":101},{"ruleId":"131","severity":1,"message":"132","line":84,"column":17,"nodeType":"92","messageId":"133","endLine":84,"endColumn":18},"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Loader' is defined but never used.","'Title' is defined but never used.","'Layout' is defined but never used.","'Container' is assigned a value but never used.","'submitting' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBalance' and 'getProvider'. Either include them or remove the dependency array.","ArrayExpression",["134"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'useEffect' is defined but never used.","'Task' is defined but never used.","'onClickRemoveProvider' is assigned a value but never used.","'checkState' is assigned a value but never used.","'Dot' is defined but never used.","'EthHashInfo' is defined but never used.","'create' is defined but never used.","'type' is defined but never used.","'SContainer' is assigned a value but never used.","'setTicker' is assigned a value but never used.","'createTransferTask' is assigned a value but never used.","'safeTxHash' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'showOrders'. Either include it or remove the dependency array.",["135"],"'addresses' is defined but never used.","'Fetcher' is assigned a value but never used.","'chainId' is assigned a value but never used.","'MAINNET_WETH' is assigned a value but never used.","'MAINNET_SUBGRAPH' is assigned a value but never used.","'RINKEBY_WETH' is assigned a value but never used.","no-redeclare","'x' is already defined.","redeclared",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [getBalance, getProvider, isSetup]",{"range":"140","text":"141"},"Update the dependencies array to be: [showOrders]",{"range":"142","text":"143"},[1415,1424],"[getBalance, getProvider, isSetup]",[12582,12584],"[showOrders]"]